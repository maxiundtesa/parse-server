"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.UserController = void 0;

var _cryptoUtils = require("../cryptoUtils");

var _triggers = require("../triggers");

var _AdaptableController = _interopRequireDefault(require("./AdaptableController"));

var _MailAdapter = _interopRequireDefault(require("../Adapters/Email/MailAdapter"));

var _rest = _interopRequireDefault(require("../rest"));

var _node = _interopRequireDefault(require("parse/node"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var RestQuery = require('../RestQuery');

var Auth = require('../Auth');

class UserController extends _AdaptableController.default {
  constructor(adapter, appId, options = {}) {
    super(adapter, appId, options);
  }

  validateAdapter(adapter) {
    // Allow no adapter
    if (!adapter && !this.shouldVerifyEmails) {
      return;
    }

    super.validateAdapter(adapter);
  }

  expectedAdapterType() {
    return _MailAdapter.default;
  }

  get shouldVerifyEmails() {
    return this.options.verifyUserEmails;
  }

  setEmailVerifyToken(user) {
    if (this.shouldVerifyEmails) {
      user._email_verify_token = (0, _cryptoUtils.randomString)(25);
      user.emailVerified = false;

      if (this.config.emailVerifyTokenValidityDuration) {
        user._email_verify_token_expires_at = _node.default._encode(this.config.generateEmailVerifyTokenExpiresAt());
      }
    }
  }

  verifyEmail(username, token) {
    if (!this.shouldVerifyEmails) {
      // Trying to verify email when not enabled
      // TODO: Better error here.
      throw undefined;
    }

    const query = {
      username: username,
      _email_verify_token: token
    };
    const updateFields = {
      emailVerified: true,
      _email_verify_token: {
        __op: 'Delete'
      }
    }; // if the email verify token needs to be validated then
    // add additional query params and additional fields that need to be updated

    if (this.config.emailVerifyTokenValidityDuration) {
      query.emailVerified = false;
      query._email_verify_token_expires_at = {
        $gt: _node.default._encode(new Date())
      };
      updateFields._email_verify_token_expires_at = {
        __op: 'Delete'
      };
    }

    const masterAuth = Auth.master(this.config);
    var checkIfAlreadyVerified = new RestQuery(this.config, Auth.master(this.config), '_User', {
      username: username,
      emailVerified: true
    });
    return checkIfAlreadyVerified.execute().then(result => {
      if (result.results.length) {
        return Promise.resolve(result.results.length[0]);
      }

      return _rest.default.update(this.config, masterAuth, '_User', query, updateFields);
    });
  }

  checkResetTokenValidity(username, token) {
    return this.config.database.find('_User', {
      username: username,
      _perishable_token: token
    }, {
      limit: 1
    }).then(results => {
      if (results.length != 1) {
        throw undefined;
      }

      if (this.config.passwordPolicy && this.config.passwordPolicy.resetTokenValidityDuration) {
        let expiresDate = results[0]._perishable_token_expires_at;

        if (expiresDate && expiresDate.__type == 'Date') {
          expiresDate = new Date(expiresDate.iso);
        }

        if (expiresDate < new Date()) throw 'The password reset link has expired';
      }

      return results[0];
    });
  }

  getUserIfNeeded(user) {
    if (user.username && user.email) {
      return Promise.resolve(user);
    }

    var where = {};

    if (user.username) {
      where.username = user.username;
    }

    if (user.email) {
      where.email = user.email;
    }

    var query = new RestQuery(this.config, Auth.master(this.config), '_User', where);
    return query.execute().then(function (result) {
      if (result.results.length != 1) {
        throw undefined;
      }

      return result.results[0];
    });
  }

  sendVerificationEmail(user) {
    if (!this.shouldVerifyEmails) {
      return;
    }

    const token = encodeURIComponent(user._email_verify_token); // We may need to fetch the user in case of update email

    this.getUserIfNeeded(user).then(user => {
      const username = encodeURIComponent(user.username);
      const mail = encodeURIComponent(user.email);
      const link = buildEmailLink(this.config.verifyEmailURL, username, mail, token, this.config);
      const options = {
        appName: this.config.appName,
        link: link,
        user: (0, _triggers.inflate)('_User', user)
      };

      if (this.adapter.sendVerificationEmail) {
        this.adapter.sendVerificationEmail(options);
      } else {
        this.adapter.sendMail(this.defaultVerificationEmail(options));
      }
    });
  }
  /**
   * Regenerates the given user's email verification token
   *
   * @param user
   * @returns {*}
   */


  regenerateEmailVerifyToken(user) {
    this.setEmailVerifyToken(user);
    return this.config.database.update('_User', {
      username: user.username
    }, user);
  }

  resendVerificationEmail(username) {
    return this.getUserIfNeeded({
      username: username
    }).then(aUser => {
      if (!aUser || aUser.emailVerified) {
        throw undefined;
      }

      return this.regenerateEmailVerifyToken(aUser).then(() => {
        this.sendVerificationEmail(aUser);
      });
    });
  }

  setPasswordResetToken(email) {
    const token = {
      _perishable_token: (0, _cryptoUtils.randomString)(25)
    };

    if (this.config.passwordPolicy && this.config.passwordPolicy.resetTokenValidityDuration) {
      token._perishable_token_expires_at = _node.default._encode(this.config.generatePasswordResetTokenExpiresAt());
    }

    return this.config.database.update('_User', {
      $or: [{
        email
      }, {
        username: email,
        email: {
          $exists: false
        }
      }]
    }, token, {}, true);
  }

  sendPasswordResetEmail(email) {
    if (!this.adapter) {
      throw 'Trying to send a reset password but no adapter is set'; //  TODO: No adapter?
    }

    return this.setPasswordResetToken(email).then(user => {
      const token = encodeURIComponent(user._perishable_token);
      const username = encodeURIComponent(user.username);
      const mail = encodeURIComponent(user.email);
      const link = buildEmailLink(this.config.requestResetPasswordURL, username, mail, token, this.config);
      const options = {
        appName: this.config.appName,
        link: link,
        user: (0, _triggers.inflate)('_User', user)
      };

      if (this.adapter.sendPasswordResetEmail) {
        this.adapter.sendPasswordResetEmail(options);
      } else {
        this.adapter.sendMail(this.defaultResetPasswordEmail(options));
      }

      return Promise.resolve(user);
    });
  }

  updatePassword(username, token, password) {
    return this.checkResetTokenValidity(username, token).then(user => updateUserPassword(user.objectId, password, this.config)).catch(error => {
      if (error.message) {
        // in case of Parse.Error, fail with the error message only
        return Promise.reject(error.message);
      } else {
        return Promise.reject(error);
      }
    });
  }

  defaultVerificationEmail({
    link,
    user,
    appName
  }) {
    const text = 'Hi,\n\n' + 'You are being asked to confirm the e-mail address ' + user.get('email') + ' with ' + appName + '\n\n' + '' + 'Click here to confirm it:\n' + link;
    const to = user.get('email');
    const subject = 'Please verify your e-mail for ' + appName;
    return {
      text,
      to,
      subject
    };
  }

  defaultResetPasswordEmail({
    link,
    user,
    appName
  }) {
    const text = 'Hi,\n\n' + 'You requested to reset your password for ' + appName + (user.get('username') ? " (your username is '" + user.get('username') + "')" : '') + '.\n\n' + '' + 'Click here to reset it:\n' + link;
    const to = user.get('email') || user.get('username');
    const subject = 'Password Reset for ' + appName;
    return {
      text,
      to,
      subject
    };
  }

} // Mark this private


exports.UserController = UserController;

function updateUserPassword(userId, password, config) {
  return _rest.default.update(config, Auth.master(config), '_User', {
    objectId: userId
  }, {
    password: password
  });
}

function buildEmailLink(destination, username, mail, token, config) {
  const usernameMailAndToken = `token=${token}&username=${username}&mail=${mail}`;

  if (config.parseFrameURL) {
    const destinationWithoutHost = destination.replace(config.publicServerURL, '');
    return `${config.parseFrameURL}?link=${encodeURIComponent(destinationWithoutHost)}&${usernameMailAndToken}`;
  } else {
    return `${destination}?${usernameMailAndToken}`;
  }
}

var _default = UserController;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9Db250cm9sbGVycy9Vc2VyQ29udHJvbGxlci5qcyJdLCJuYW1lcyI6WyJSZXN0UXVlcnkiLCJyZXF1aXJlIiwiQXV0aCIsIlVzZXJDb250cm9sbGVyIiwiQWRhcHRhYmxlQ29udHJvbGxlciIsImNvbnN0cnVjdG9yIiwiYWRhcHRlciIsImFwcElkIiwib3B0aW9ucyIsInZhbGlkYXRlQWRhcHRlciIsInNob3VsZFZlcmlmeUVtYWlscyIsImV4cGVjdGVkQWRhcHRlclR5cGUiLCJNYWlsQWRhcHRlciIsInZlcmlmeVVzZXJFbWFpbHMiLCJzZXRFbWFpbFZlcmlmeVRva2VuIiwidXNlciIsIl9lbWFpbF92ZXJpZnlfdG9rZW4iLCJlbWFpbFZlcmlmaWVkIiwiY29uZmlnIiwiZW1haWxWZXJpZnlUb2tlblZhbGlkaXR5RHVyYXRpb24iLCJfZW1haWxfdmVyaWZ5X3Rva2VuX2V4cGlyZXNfYXQiLCJQYXJzZSIsIl9lbmNvZGUiLCJnZW5lcmF0ZUVtYWlsVmVyaWZ5VG9rZW5FeHBpcmVzQXQiLCJ2ZXJpZnlFbWFpbCIsInVzZXJuYW1lIiwidG9rZW4iLCJ1bmRlZmluZWQiLCJxdWVyeSIsInVwZGF0ZUZpZWxkcyIsIl9fb3AiLCIkZ3QiLCJEYXRlIiwibWFzdGVyQXV0aCIsIm1hc3RlciIsImNoZWNrSWZBbHJlYWR5VmVyaWZpZWQiLCJleGVjdXRlIiwidGhlbiIsInJlc3VsdCIsInJlc3VsdHMiLCJsZW5ndGgiLCJQcm9taXNlIiwicmVzb2x2ZSIsInJlc3QiLCJ1cGRhdGUiLCJjaGVja1Jlc2V0VG9rZW5WYWxpZGl0eSIsImRhdGFiYXNlIiwiZmluZCIsIl9wZXJpc2hhYmxlX3Rva2VuIiwibGltaXQiLCJwYXNzd29yZFBvbGljeSIsInJlc2V0VG9rZW5WYWxpZGl0eUR1cmF0aW9uIiwiZXhwaXJlc0RhdGUiLCJfcGVyaXNoYWJsZV90b2tlbl9leHBpcmVzX2F0IiwiX190eXBlIiwiaXNvIiwiZ2V0VXNlcklmTmVlZGVkIiwiZW1haWwiLCJ3aGVyZSIsInNlbmRWZXJpZmljYXRpb25FbWFpbCIsImVuY29kZVVSSUNvbXBvbmVudCIsIm1haWwiLCJsaW5rIiwiYnVpbGRFbWFpbExpbmsiLCJ2ZXJpZnlFbWFpbFVSTCIsImFwcE5hbWUiLCJzZW5kTWFpbCIsImRlZmF1bHRWZXJpZmljYXRpb25FbWFpbCIsInJlZ2VuZXJhdGVFbWFpbFZlcmlmeVRva2VuIiwicmVzZW5kVmVyaWZpY2F0aW9uRW1haWwiLCJhVXNlciIsInNldFBhc3N3b3JkUmVzZXRUb2tlbiIsImdlbmVyYXRlUGFzc3dvcmRSZXNldFRva2VuRXhwaXJlc0F0IiwiJG9yIiwiJGV4aXN0cyIsInNlbmRQYXNzd29yZFJlc2V0RW1haWwiLCJyZXF1ZXN0UmVzZXRQYXNzd29yZFVSTCIsImRlZmF1bHRSZXNldFBhc3N3b3JkRW1haWwiLCJ1cGRhdGVQYXNzd29yZCIsInBhc3N3b3JkIiwidXBkYXRlVXNlclBhc3N3b3JkIiwib2JqZWN0SWQiLCJjYXRjaCIsImVycm9yIiwibWVzc2FnZSIsInJlamVjdCIsInRleHQiLCJnZXQiLCJ0byIsInN1YmplY3QiLCJ1c2VySWQiLCJkZXN0aW5hdGlvbiIsInVzZXJuYW1lTWFpbEFuZFRva2VuIiwicGFyc2VGcmFtZVVSTCIsImRlc3RpbmF0aW9uV2l0aG91dEhvc3QiLCJyZXBsYWNlIiwicHVibGljU2VydmVyVVJMIl0sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUE7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7Ozs7QUFFQSxJQUFJQSxTQUFTLEdBQUdDLE9BQU8sQ0FBQyxjQUFELENBQXZCOztBQUNBLElBQUlDLElBQUksR0FBR0QsT0FBTyxDQUFDLFNBQUQsQ0FBbEI7O0FBRU8sTUFBTUUsY0FBTixTQUE2QkMsNEJBQTdCLENBQWlEO0FBQ3REQyxFQUFBQSxXQUFXLENBQUNDLE9BQUQsRUFBVUMsS0FBVixFQUFpQkMsT0FBTyxHQUFHLEVBQTNCLEVBQStCO0FBQ3hDLFVBQU1GLE9BQU4sRUFBZUMsS0FBZixFQUFzQkMsT0FBdEI7QUFD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VCxDQUE0QlUsTUFBNUIsRUFBb0NYLFFBQXBDLEVBQThDN0QsTUFBOUMsRUFBc0Q7QUFDcEQsU0FBT3lCLGNBQUtDLE1BQUwsQ0FDTDFCLE1BREssRUFFTGhCLElBQUksQ0FBQ2dDLE1BQUwsQ0FBWWhCLE1BQVosQ0FGSyxFQUdMLE9BSEssRUFJTDtBQUFFK0QsSUFBQUEsUUFBUSxFQUFFUztBQUFaLEdBSkssRUFLTDtBQUNFWCxJQUFBQSxRQUFRLEVBQUVBO0FBRFosR0FMSyxDQUFQO0FBU0Q7O0FBRUQsU0FBU2hCLGNBQVQsQ0FBd0I0QixXQUF4QixFQUFxQ2xFLFFBQXJDLEVBQStDb0MsSUFBL0MsRUFBcURuQyxLQUFyRCxFQUE0RFIsTUFBNUQsRUFBb0U7QUFDbEUsUUFBTTBFLG9CQUFvQixHQUFJLFNBQVFsRSxLQUFNLGFBQVlELFFBQVMsU0FBUW9DLElBQUssRUFBOUU7O0FBRUEsTUFBSTNDLE1BQU0sQ0FBQzJFLGFBQVgsRUFBMEI7QUFDeEIsVUFBTUMsc0JBQXNCLEdBQUdILFdBQVcsQ0FBQ0ksT0FBWixDQUM3QjdFLE1BQU0sQ0FBQzhFLGVBRHNCLEVBRTdCLEVBRjZCLENBQS9CO0FBS0EsV0FBUSxHQUFFOUUsTUFBTSxDQUFDMkUsYUFBYyxTQUFRakMsa0JBQWtCLENBQ3ZEa0Msc0JBRHVELENBRXZELElBQUdGLG9CQUFxQixFQUYxQjtBQUdELEdBVEQsTUFTTztBQUNMLFdBQVEsR0FBRUQsV0FBWSxJQUFHQyxvQkFBcUIsRUFBOUM7QUFDRDtBQUNGOztlQUVjekYsYyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHJhbmRvbVN0cmluZyB9IGZyb20gJy4uL2NyeXB0b1V0aWxzJztcbmltcG9ydCB7IGluZmxhdGUgfSBmcm9tICcuLi90cmlnZ2Vycyc7XG5pbXBvcnQgQWRhcHRhYmxlQ29udHJvbGxlciBmcm9tICcuL0FkYXB0YWJsZUNvbnRyb2xsZXInO1xuaW1wb3J0IE1haWxBZGFwdGVyIGZyb20gJy4uL0FkYXB0ZXJzL0VtYWlsL01haWxBZGFwdGVyJztcbmltcG9ydCByZXN0IGZyb20gJy4uL3Jlc3QnO1xuaW1wb3J0IFBhcnNlIGZyb20gJ3BhcnNlL25vZGUnO1xuXG52YXIgUmVzdFF1ZXJ5ID0gcmVxdWlyZSgnLi4vUmVzdFF1ZXJ5Jyk7XG52YXIgQXV0aCA9IHJlcXVpcmUoJy4uL0F1dGgnKTtcblxuZXhwb3J0IGNsYXNzIFVzZXJDb250cm9sbGVyIGV4dGVuZHMgQWRhcHRhYmxlQ29udHJvbGxlciB7XG4gIGNvbnN0cnVjdG9yKGFkYXB0ZXIsIGFwcElkLCBvcHRpb25zID0ge30pIHtcbiAgICBzdXBlcihhZGFwdGVyLCBhcHBJZCwgb3B0aW9ucyk7XG4gIH1cblxuICB2YWxpZGF0ZUFkYXB0ZXIoYWRhcHRlcikge1xuICAgIC8vIEFsbG93IG5vIGFkYXB0ZXJcbiAgICBpZiAoIWFkYXB0ZXIgJiYgIXRoaXMuc2hvdWxkVmVyaWZ5RW1haWxzKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHN1cGVyLnZhbGlkYXRlQWRhcHRlcihhZGFwdGVyKTtcbiAgfVxuXG4gIGV4cGVjdGVkQWRhcHRlclR5cGUoKSB7XG4gICAgcmV0dXJuIE1haWxBZGFwdGVyO1xuICB9XG5cbiAgZ2V0IHNob3VsZFZlcmlmeUVtYWlscygpIHtcbiAgICByZXR1cm4gdGhpcy5vcHRpb25zLnZlcmlmeVVzZXJFbWFpbHM7XG4gIH1cblxuICBzZXRFbWFpbFZlcmlmeVRva2VuKHVzZXIpIHtcbiAgICBpZiAodGhpcy5zaG91bGRWZXJpZnlFbWFpbHMpIHtcbiAgICAgIHVzZXIuX2VtYWlsX3ZlcmlmeV90b2tlbiA9IHJhbmRvbVN0cmluZygyNSk7XG4gICAgICB1c2VyLmVtYWlsVmVyaWZpZWQgPSBmYWxzZTtcblxuICAgICAgaWYgKHRoaXMuY29uZmlnLmVtYWlsVmVyaWZ5VG9rZW5WYWxpZGl0eUR1cmF0aW9uKSB7XG4gICAgICAgIHVzZXIuX2VtYWlsX3ZlcmlmeV90b2tlbl9leHBpcmVzX2F0ID0gUGFyc2UuX2VuY29kZShcbiAgICAgICAgICB0aGlzLmNvbmZpZy5nZW5lcmF0ZUVtYWlsVmVyaWZ5VG9rZW5FeHBpcmVzQXQoKVxuICAgICAgICApO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHZlcmlmeUVtYWlsKHVzZXJuYW1lLCB0b2tlbikge1xuICAgIGlmICghdGhpcy5zaG91bGRWZXJpZnlFbWFpbHMpIHtcbiAgICAgIC8vIFRyeWluZyB0byB2ZXJpZnkgZW1haWwgd2hlbiBub3QgZW5hYmxlZFxuICAgICAgLy8gVE9ETzogQmV0dGVyIGVycm9yIGhlcmUuXG4gICAgICB0aHJvdyB1bmRlZmluZWQ7XG4gICAgfVxuXG4gICAgY29uc3QgcXVlcnkgPSB7IHVzZXJuYW1lOiB1c2VybmFtZSwgX2VtYWlsX3ZlcmlmeV90b2tlbjogdG9rZW4gfTtcbiAgICBjb25zdCB1cGRhdGVGaWVsZHMgPSB7XG4gICAgICBlbWFpbFZlcmlmaWVkOiB0cnVlLFxuICAgICAgX2VtYWlsX3ZlcmlmeV90b2tlbjogeyBfX29wOiAnRGVsZXRlJyB9LFxuICAgIH07XG5cbiAgICAvLyBpZiB0aGUgZW1haWwgdmVyaWZ5IHRva2VuIG5lZWRzIHRvIGJlIHZhbGlkYXRlZCB0aGVuXG4gICAgLy8gYWRkIGFkZGl0aW9uYWwgcXVlcnkgcGFyYW1zIGFuZCBhZGRpdGlvbmFsIGZpZWxkcyB0aGF0IG5lZWQgdG8gYmUgdXBkYXRlZFxuICAgIGlmICh0aGlzLmNvbmZpZy5lbWFpbFZlcmlmeVRva2VuVmFsaWRpdHlEdXJhdGlvbikge1xuICAgICAgcXVlcnkuZW1haWxWZXJpZmllZCA9IGZhbHNlO1xuICAgICAgcXVlcnkuX2VtYWlsX3ZlcmlmeV90b2tlbl9leHBpcmVzX2F0ID0geyAkZ3Q6IFBhcnNlLl9lbmNvZGUobmV3IERhdGUoKSkgfTtcblxuICAgICAgdXBkYXRlRmllbGRzLl9lbWFpbF92ZXJpZnlfdG9rZW5fZXhwaXJlc19hdCA9IHsgX19vcDogJ0RlbGV0ZScgfTtcbiAgICB9XG4gICAgY29uc3QgbWFzdGVyQXV0aCA9IEF1dGgubWFzdGVyKHRoaXMuY29uZmlnKTtcbiAgICB2YXIgY2hlY2tJZkFscmVhZHlWZXJpZmllZCA9IG5ldyBSZXN0UXVlcnkoXG4gICAgICB0aGlzLmNvbmZpZyxcbiAgICAgIEF1dGgubWFzdGVyKHRoaXMuY29uZmlnKSxcbiAgICAgICdfVXNlcicsXG4gICAgICB7IHVzZXJuYW1lOiB1c2VybmFtZSwgZW1haWxWZXJpZmllZDogdHJ1ZSB9XG4gICAgKTtcbiAgICByZXR1cm4gY2hlY2tJZkFscmVhZHlWZXJpZmllZC5leGVjdXRlKCkudGhlbihyZXN1bHQgPT4ge1xuICAgICAgaWYgKHJlc3VsdC5yZXN1bHRzLmxlbmd0aCkge1xuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHJlc3VsdC5yZXN1bHRzLmxlbmd0aFswXSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdC51cGRhdGUodGhpcy5jb25maWcsIG1hc3RlckF1dGgsICdfVXNlcicsIHF1ZXJ5LCB1cGRhdGVGaWVsZHMpO1xuICAgIH0pO1xuICB9XG5cbiAgY2hlY2tSZXNldFRva2VuVmFsaWRpdHkodXNlcm5hbWUsIHRva2VuKSB7XG4gICAgcmV0dXJuIHRoaXMuY29uZmlnLmRhdGFiYXNlXG4gICAgICAuZmluZChcbiAgICAgICAgJ19Vc2VyJyxcbiAgICAgICAge1xuICAgICAgICAgIHVzZXJuYW1lOiB1c2VybmFtZSxcbiAgICAgICAgICBfcGVyaXNoYWJsZV90b2tlbjogdG9rZW4sXG4gICAgICAgIH0sXG4gICAgICAgIHsgbGltaXQ6IDEgfVxuICAgICAgKVxuICAgICAgLnRoZW4ocmVzdWx0cyA9PiB7XG4gICAgICAgIGlmIChyZXN1bHRzLmxlbmd0aCAhPSAxKSB7XG4gICAgICAgICAgdGhyb3cgdW5kZWZpbmVkO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKFxuICAgICAgICAgIHRoaXMuY29uZmlnLnBhc3N3b3JkUG9saWN5ICYmXG4gICAgICAgICAgdGhpcy5jb25maWcucGFzc3dvcmRQb2xpY3kucmVzZXRUb2tlblZhbGlkaXR5RHVyYXRpb25cbiAgICAgICAgKSB7XG4gICAgICAgICAgbGV0IGV4cGlyZXNEYXRlID0gcmVzdWx0c1swXS5fcGVyaXNoYWJsZV90b2tlbl9leHBpcmVzX2F0O1xuICAgICAgICAgIGlmIChleHBpcmVzRGF0ZSAmJiBleHBpcmVzRGF0ZS5fX3R5cGUgPT0gJ0RhdGUnKSB7XG4gICAgICAgICAgICBleHBpcmVzRGF0ZSA9IG5ldyBEYXRlKGV4cGlyZXNEYXRlLmlzbyk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChleHBpcmVzRGF0ZSA8IG5ldyBEYXRlKCkpXG4gICAgICAgICAgICB0aHJvdyAnVGhlIHBhc3N3b3JkIHJlc2V0IGxpbmsgaGFzIGV4cGlyZWQnO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHJlc3VsdHNbMF07XG4gICAgICB9KTtcbiAgfVxuXG4gIGdldFVzZXJJZk5lZWRlZCh1c2VyKSB7XG4gICAgaWYgKHVzZXIudXNlcm5hbWUgJiYgdXNlci5lbWFpbCkge1xuICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSh1c2VyKTtcbiAgICB9XG4gICAgdmFyIHdoZXJlID0ge307XG4gICAgaWYgKHVzZXIudXNlcm5hbWUpIHtcbiAgICAgIHdoZXJlLnVzZXJuYW1lID0gdXNlci51c2VybmFtZTtcbiAgICB9XG4gICAgaWYgKHVzZXIuZW1haWwpIHtcbiAgICAgIHdoZXJlLmVtYWlsID0gdXNlci5lbWFpbDtcbiAgICB9XG5cbiAgICB2YXIgcXVlcnkgPSBuZXcgUmVzdFF1ZXJ5KFxuICAgICAgdGhpcy5jb25maWcsXG4gICAgICBBdXRoLm1hc3Rlcih0aGlzLmNvbmZpZyksXG4gICAgICAnX1VzZXInLFxuICAgICAgd2hlcmVcbiAgICApO1xuICAgIHJldHVybiBxdWVyeS5leGVjdXRlKCkudGhlbihmdW5jdGlvbihyZXN1bHQpIHtcbiAgICAgIGlmIChyZXN1bHQucmVzdWx0cy5sZW5ndGggIT0gMSkge1xuICAgICAgICB0aHJvdyB1bmRlZmluZWQ7XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0LnJlc3VsdHNbMF07XG4gICAgfSk7XG4gIH1cblxuICBzZW5kVmVyaWZpY2F0aW9uRW1haWwodXNlcikge1xuICAgIGlmICghdGhpcy5zaG91bGRWZXJpZnlFbWFpbHMpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY29uc3QgdG9rZW4gPSBlbmNvZGVVUklDb21wb25lbnQodXNlci5fZW1haWxfdmVyaWZ5X3Rva2VuKTtcbiAgICAvLyBXZSBtYXkgbmVlZCB0byBmZXRjaCB0aGUgdXNlciBpbiBjYXNlIG9mIHVwZGF0ZSBlbWFpbFxuICAgIHRoaXMuZ2V0VXNlcklmTmVlZGVkKHVzZXIpLnRoZW4odXNlciA9PiB7XG4gICAgICBjb25zdCB1c2VybmFtZSA9IGVuY29kZVVSSUNvbXBvbmVudCh1c2VyLnVzZXJuYW1lKTtcbiAgICAgIGNvbnN0IG1haWwgPSBlbmNvZGVVUklDb21wb25lbnQodXNlci5lbWFpbCk7XG5cbiAgICAgIGNvbnN0IGxpbmsgPSBidWlsZEVtYWlsTGluayhcbiAgICAgICAgdGhpcy5jb25maWcudmVyaWZ5RW1haWxVUkwsXG4gICAgICAgIHVzZXJuYW1lLFxuICAgICAgICBtYWlsLFxuICAgICAgICB0b2tlbixcbiAgICAgICAgdGhpcy5jb25maWdcbiAgICAgICk7XG4gICAgICBjb25zdCBvcHRpb25zID0ge1xuICAgICAgICBhcHBOYW1lOiB0aGlzLmNvbmZpZy5hcHBOYW1lLFxuICAgICAgICBsaW5rOiBsaW5rLFxuICAgICAgICB1c2VyOiBpbmZsYXRlKCdfVXNlcicsIHVzZXIpLFxuICAgICAgfTtcbiAgICAgIGlmICh0aGlzLmFkYXB0ZXIuc2VuZFZlcmlmaWNhdGlvbkVtYWlsKSB7XG4gICAgICAgIHRoaXMuYWRhcHRlci5zZW5kVmVyaWZpY2F0aW9uRW1haWwob3B0aW9ucyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLmFkYXB0ZXIuc2VuZE1haWwodGhpcy5kZWZhdWx0VmVyaWZpY2F0aW9uRW1haWwob3B0aW9ucykpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIFJlZ2VuZXJhdGVzIHRoZSBnaXZlbiB1c2VyJ3MgZW1haWwgdmVyaWZpY2F0aW9uIHRva2VuXG4gICAqXG4gICAqIEBwYXJhbSB1c2VyXG4gICAqIEByZXR1cm5zIHsqfVxuICAgKi9cbiAgcmVnZW5lcmF0ZUVtYWlsVmVyaWZ5VG9rZW4odXNlcikge1xuICAgIHRoaXMuc2V0RW1haWxWZXJpZnlUb2tlbih1c2VyKTtcbiAgICByZXR1cm4gdGhpcy5jb25maWcuZGF0YWJhc2UudXBkYXRlKFxuICAgICAgJ19Vc2VyJyxcbiAgICAgIHsgdXNlcm5hbWU6IHVzZXIudXNlcm5hbWUgfSxcbiAgICAgIHVzZXJcbiAgICApO1xuICB9XG5cbiAgcmVzZW5kVmVyaWZpY2F0aW9uRW1haWwodXNlcm5hbWUpIHtcbiAgICByZXR1cm4gdGhpcy5nZXRVc2VySWZOZWVkZWQoeyB1c2VybmFtZTogdXNlcm5hbWUgfSkudGhlbihhVXNlciA9PiB7XG4gICAgICBpZiAoIWFVc2VyIHx8IGFVc2VyLmVtYWlsVmVyaWZpZWQpIHtcbiAgICAgICAgdGhyb3cgdW5kZWZpbmVkO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHRoaXMucmVnZW5lcmF0ZUVtYWlsVmVyaWZ5VG9rZW4oYVVzZXIpLnRoZW4oKCkgPT4ge1xuICAgICAgICB0aGlzLnNlbmRWZXJpZmljYXRpb25FbWFpbChhVXNlcik7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfVxuXG4gIHNldFBhc3N3b3JkUmVzZXRUb2tlbihlbWFpbCkge1xuICAgIGNvbnN0IHRva2VuID0geyBfcGVyaXNoYWJsZV90b2tlbjogcmFuZG9tU3RyaW5nKDI1KSB9O1xuXG4gICAgaWYgKFxuICAgICAgdGhpcy5jb25maWcucGFzc3dvcmRQb2xpY3kgJiZcbiAgICAgIHRoaXMuY29uZmlnLnBhc3N3b3JkUG9saWN5LnJlc2V0VG9rZW5WYWxpZGl0eUR1cmF0aW9uXG4gICAgKSB7XG4gICAgICB0b2tlbi5fcGVyaXNoYWJsZV90b2tlbl9leHBpcmVzX2F0ID0gUGFyc2UuX2VuY29kZShcbiAgICAgICAgdGhpcy5jb25maWcuZ2VuZXJhdGVQYXNzd29yZFJlc2V0VG9rZW5FeHBpcmVzQXQoKVxuICAgICAgKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5jb25maWcuZGF0YWJhc2UudXBkYXRlKFxuICAgICAgJ19Vc2VyJyxcbiAgICAgIHsgJG9yOiBbeyBlbWFpbCB9LCB7IHVzZXJuYW1lOiBlbWFpbCwgZW1haWw6IHsgJGV4aXN0czogZmFsc2UgfSB9XSB9LFxuICAgICAgdG9rZW4sXG4gICAgICB7fSxcbiAgICAgIHRydWVcbiAgICApO1xuICB9XG5cbiAgc2VuZFBhc3N3b3JkUmVzZXRFbWFpbChlbWFpbCkge1xuICAgIGlmICghdGhpcy5hZGFwdGVyKSB7XG4gICAgICB0aHJvdyAnVHJ5aW5nIHRvIHNlbmQgYSByZXNldCBwYXNzd29yZCBidXQgbm8gYWRhcHRlciBpcyBzZXQnO1xuICAgICAgLy8gIFRPRE86IE5vIGFkYXB0ZXI/XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuc2V0UGFzc3dvcmRSZXNldFRva2VuKGVtYWlsKS50aGVuKHVzZXIgPT4ge1xuICAgICAgY29uc3QgdG9rZW4gPSBlbmNvZGVVUklDb21wb25lbnQodXNlci5fcGVyaXNoYWJsZV90b2tlbik7XG4gICAgICBjb25zdCB1c2VybmFtZSA9IGVuY29kZVVSSUNvbXBvbmVudCh1c2VyLnVzZXJuYW1lKTtcbiAgICAgIGNvbnN0IG1haWwgPSBlbmNvZGVVUklDb21wb25lbnQodXNlci5lbWFpbCk7XG5cbiAgICAgIGNvbnN0IGxpbmsgPSBidWlsZEVtYWlsTGluayhcbiAgICAgICAgdGhpcy5jb25maWcucmVxdWVzdFJlc2V0UGFzc3dvcmRVUkwsXG4gICAgICAgIHVzZXJuYW1lLFxuICAgICAgICBtYWlsLFxuICAgICAgICB0b2tlbixcbiAgICAgICAgdGhpcy5jb25maWdcbiAgICAgICk7XG4gICAgICBjb25zdCBvcHRpb25zID0ge1xuICAgICAgICBhcHBOYW1lOiB0aGlzLmNvbmZpZy5hcHBOYW1lLFxuICAgICAgICBsaW5rOiBsaW5rLFxuICAgICAgICB1c2VyOiBpbmZsYXRlKCdfVXNlcicsIHVzZXIpLFxuICAgICAgfTtcblxuICAgICAgaWYgKHRoaXMuYWRhcHRlci5zZW5kUGFzc3dvcmRSZXNldEVtYWlsKSB7XG4gICAgICAgIHRoaXMuYWRhcHRlci5zZW5kUGFzc3dvcmRSZXNldEVtYWlsKG9wdGlvbnMpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5hZGFwdGVyLnNlbmRNYWlsKHRoaXMuZGVmYXVsdFJlc2V0UGFzc3dvcmRFbWFpbChvcHRpb25zKSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUodXNlcik7XG4gICAgfSk7XG4gIH1cblxuICB1cGRhdGVQYXNzd29yZCh1c2VybmFtZSwgdG9rZW4sIHBhc3N3b3JkKSB7XG4gICAgcmV0dXJuIHRoaXMuY2hlY2tSZXNldFRva2VuVmFsaWRpdHkodXNlcm5hbWUsIHRva2VuKVxuICAgICAgLnRoZW4odXNlciA9PiB1cGRhdGVVc2VyUGFzc3dvcmQodXNlci5vYmplY3RJZCwgcGFzc3dvcmQsIHRoaXMuY29uZmlnKSlcbiAgICAgIC5jYXRjaChlcnJvciA9PiB7XG4gICAgICAgIGlmIChlcnJvci5tZXNzYWdlKSB7XG4gICAgICAgICAgLy8gaW4gY2FzZSBvZiBQYXJzZS5FcnJvciwgZmFpbCB3aXRoIHRoZSBlcnJvciBtZXNzYWdlIG9ubHlcbiAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QoZXJyb3IubWVzc2FnZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KGVycm9yKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gIH1cblxuICBkZWZhdWx0VmVyaWZpY2F0aW9uRW1haWwoeyBsaW5rLCB1c2VyLCBhcHBOYW1lIH0pIHtcbiAgICBjb25zdCB0ZXh0ID1cbiAgICAgICdIaSxcXG5cXG4nICtcbiAgICAgICdZb3UgYXJlIGJlaW5nIGFza2VkIHRvIGNvbmZpcm0gdGhlIGUtbWFpbCBhZGRyZXNzICcgK1xuICAgICAgdXNlci5nZXQoJ2VtYWlsJykgK1xuICAgICAgJyB3aXRoICcgK1xuICAgICAgYXBwTmFtZSArXG4gICAgICAnXFxuXFxuJyArXG4gICAgICAnJyArXG4gICAgICAnQ2xpY2sgaGVyZSB0byBjb25maXJtIGl0OlxcbicgK1xuICAgICAgbGluaztcbiAgICBjb25zdCB0byA9IHVzZXIuZ2V0KCdlbWFpbCcpO1xuICAgIGNvbnN0IHN1YmplY3QgPSAnUGxlYXNlIHZlcmlmeSB5b3VyIGUtbWFpbCBmb3IgJyArIGFwcE5hbWU7XG4gICAgcmV0dXJuIHsgdGV4dCwgdG8sIHN1YmplY3QgfTtcbiAgfVxuXG4gIGRlZmF1bHRSZXNldFBhc3N3b3JkRW1haWwoeyBsaW5rLCB1c2VyLCBhcHBOYW1lIH0pIHtcbiAgICBjb25zdCB0ZXh0ID1cbiAgICAgICdIaSxcXG5cXG4nICtcbiAgICAgICdZb3UgcmVxdWVzdGVkIHRvIHJlc2V0IHlvdXIgcGFzc3dvcmQgZm9yICcgK1xuICAgICAgYXBwTmFtZSArXG4gICAgICAodXNlci5nZXQoJ3VzZXJuYW1lJylcbiAgICAgICAgPyBcIiAoeW91ciB1c2VybmFtZSBpcyAnXCIgKyB1c2VyLmdldCgndXNlcm5hbWUnKSArIFwiJylcIlxuICAgICAgICA6ICcnKSArXG4gICAgICAnLlxcblxcbicgK1xuICAgICAgJycgK1xuICAgICAgJ0NsaWNrIGhlcmUgdG8gcmVzZXQgaXQ6XFxuJyArXG4gICAgICBsaW5rO1xuICAgIGNvbnN0IHRvID0gdXNlci5nZXQoJ2VtYWlsJykgfHwgdXNlci5nZXQoJ3VzZXJuYW1lJyk7XG4gICAgY29uc3Qgc3ViamVjdCA9ICdQYXNzd29yZCBSZXNldCBmb3IgJyArIGFwcE5hbWU7XG4gICAgcmV0dXJuIHsgdGV4dCwgdG8sIHN1YmplY3QgfTtcbiAgfVxufVxuXG4vLyBNYXJrIHRoaXMgcHJpdmF0ZVxuZnVuY3Rpb24gdXBkYXRlVXNlclBhc3N3b3JkKHVzZXJJZCwgcGFzc3dvcmQsIGNvbmZpZykge1xuICByZXR1cm4gcmVzdC51cGRhdGUoXG4gICAgY29uZmlnLFxuICAgIEF1dGgubWFzdGVyKGNvbmZpZyksXG4gICAgJ19Vc2VyJyxcbiAgICB7IG9iamVjdElkOiB1c2VySWQgfSxcbiAgICB7XG4gICAgICBwYXNzd29yZDogcGFzc3dvcmQsXG4gICAgfVxuICApO1xufVxuXG5mdW5jdGlvbiBidWlsZEVtYWlsTGluayhkZXN0aW5hdGlvbiwgdXNlcm5hbWUsIG1haWwsIHRva2VuLCBjb25maWcpIHtcbiAgY29uc3QgdXNlcm5hbWVNYWlsQW5kVG9rZW4gPSBgdG9rZW49JHt0b2tlbn0mdXNlcm5hbWU9JHt1c2VybmFtZX0mbWFpbD0ke21haWx9YDtcblxuICBpZiAoY29uZmlnLnBhcnNlRnJhbWVVUkwpIHtcbiAgICBjb25zdCBkZXN0aW5hdGlvbldpdGhvdXRIb3N0ID0gZGVzdGluYXRpb24ucmVwbGFjZShcbiAgICAgIGNvbmZpZy5wdWJsaWNTZXJ2ZXJVUkwsXG4gICAgICAnJ1xuICAgICk7XG5cbiAgICByZXR1cm4gYCR7Y29uZmlnLnBhcnNlRnJhbWVVUkx9P2xpbms9JHtlbmNvZGVVUklDb21wb25lbnQoXG4gICAgICBkZXN0aW5hdGlvbldpdGhvdXRIb3N0XG4gICAgKX0mJHt1c2VybmFtZU1haWxBbmRUb2tlbn1gO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBgJHtkZXN0aW5hdGlvbn0/JHt1c2VybmFtZU1haWxBbmRUb2tlbn1gO1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IFVzZXJDb250cm9sbGVyO1xuIl19