"use strict";

const Parse = require('parse/node').Parse;

const httpsRequest = require('./httpsRequest');

const NodeRSA = require('node-rsa');

const jwt = require('jsonwebtoken');

const TOKEN_ISSUER = 'https://appleid.apple.com';
let currentKey;

const getApplePublicKey = async () => {
  let data;

  try {
    data = await httpsRequest.get('https://appleid.apple.com/auth/keys');
  } catch (e) {
    if (currentKey) {
      return currentKey;
    }

    throw e;
  }

  const key = data.keys[0];
  const pubKey = new NodeRSA();
  pubKey.importKey({
    n: Buffer.from(key.n, 'base64'),
    e: Buffer.from(key.e, 'base64')
  }, 'components-public');
  currentKey = pubKey.exportKey(['public']);
  return currentKey;
};

const verifyIdToken = async ({
  token,
  id
}, clientID) => {
  if (!token) {
    throw new Parse.Error(Parse.Error.OBJECT_NOT_FOUND, 'id token is invalid for this user.');
  }

  const applePublicKey = await getApplePublicKey();
  const jwtClaims = jwt.verify(token, applePublicKey, {
    algorithms: 'RS256'
  });

  if (jwtClaims.iss !== TOKEN_ISSUER) {
    throw new Parse.Error(Parse.Error.OBJECT_NOT_FOUND, `id token not issued by correct OpenID provider - expected: ${TOKEN_ISSUER} | from: ${jwtClaims.iss}`);
  }

  if (jwtClaims.sub !== id) {
    throw new Parse.Error(Parse.Error.OBJECT_NOT_FOUND, `auth data is invalid for this user.`);
  }

  if (clientID !== undefined && Array.isArray(clientID) && clientID.includes(jwtClaims.aud) === false) {
    throw new Parse.Error(Parse.Error.OBJECT_NOT_FOUND, `jwt aud parameter does not include this client - is: ${jwtClaims.aud} | expected: ${clientID}`);
  }

  return jwtClaims;
}; // Returns a promise that fulfills if this id token is valid


function validateAuthData(authData, options = {}) {
  return verifyIdToken(authData, options.client_id);
} // Returns a promise that fulfills if this app id is valid.


function validateAppId() {
  return Promise.resolve();
}

module.exports = {
  validateAppId,
  validateAuthData
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9BZGFwdGVycy9BdXRoL2FwcGxlLmpzIl0sIm5hbWVzIjpbIlBhcnNlIiwicmVxdWlyZSIsImh0dHBzUmVxdWVzdCIsIk5vZGVSU0EiLCJqd3QiLCJUT0tFTl9JU1NVRVIiLCJjdXJyZW50S2V5IiwiZ2V0QXBwbGVQdWJsaWNLZXkiLCJkYXRhIiwiZ2V0IiwiZSIsImtleSIsImtleXMiLCJwdWJLZXkiLCJpbXBvcnRLZXkiLCJuIiwiQnVmZmVyIiwiZnJvbSIsImV4cG9ydEtleSIsInZlcmlmeUlkVG9rZW4iLCJ0b2tlbiIsImlkIiwiY2xpZW50SUQiLCJFcnJvciIsIk9CSkVDVF9OT1RfRk9VTkQiLCJhcHBsZVB1YmxpY0tleSIsImp3dENsYWltcyIsInZlcmlmeSIsImFsZ29yaXRobXMiLCJpc3MiLCJzdWIiLCJ1bmRlZmluZWQiLCJBcnJheSIsImlzQXJyYXkiLCJpbmNsdWRlcyIsImF1ZCIsInZhbGlkYXRlQXV0aERhdGEiLCJhdXRoRGF0YSIsIm9wdGlvbnMiLCJjbGllbnRfaWQiLCJ2YWxpZGF0ZUFwcElkIiwiUHJvbWlzZSIsInJlc29sdmUiLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiOztBQUFBLE1BQU1BLEtBQUssR0FBR0MsT0FBTyxDQUFDLFlBQUQsQ0FBUCxDQUFzQkQsS0FBcEM7O0FBQ0EsTUFBTUUsWUFBWSxHQUFHRCxPQUFPLENBQUMsZ0JBQUQsQ0FBNUI7O0FBQ0EsTUFBTUUsT0FBTyxHQUFHRixPQUFPLENBQUMsVUFBRCxDQUF2Qjs7QUFDQSxNQUFNRyxHQUFHLEdBQUdILE9BQU8sQ0FBQyxjQUFELENBQW5COztBQUVBLE1BQU1JLFlBQVksR0FBRywyQkFBckI7QUFFQSxJQUFJQyxVQUFKOztBQUVBLE1BQU1DLGlCQUFpQixHQUFHLFlBQVk7QUFDcEMsTUFBSUMsSUFBSjs7QUFDQSxNQUFJO0FBQ0ZBLElBQUFBLElBQUksR0FBRyxNQUFNTixZQUFZLENBQUNPLEdBQWIsQ0FBaUIscUNBQWpCLENBQWI7QUFDRCxHQUZELENBRUUsT0FBT0MsQ0FBUCxFQUFVO0FBQ1YsUUFBSUosVUFBSixFQUFnQjtBQUNkLGFBQU9BLFVBQVA7QUFDRDs7QUFDRCxVQUFNSSxDQUFOO0FBQ0Q7O0FBRUQsUUFBTUMsR0FBRyxHQUFHSCxJQUFJLENBQUNJLElBQUwsQ0FBVSxDQUFWLENBQVo7QUFFQSxRQUFNQyxNQUFNLEdBQUcsSUFBSVYsT0FBSixFQUFmO0FBQ0FVLEVBQUFBLE1BQU0sQ0FBQ0MsU0FBUCxDQUNFO0FBQUVDLElBQUFBLENBQUMsRUFBRUMsTUFBTSxDQUFDQyxJQUFQLENBQVlOLEdBQUcsQ0FBQ0ksQ0FBaEIsRUFBbUIsUUFBbkIsQ0FBTDtBQUFtQ0wsSUFBQUEsQ0FBQyxFQUFFTSxNQUFNLENBQUNDLElBQVAsQ0FBWU4sR0FBRyxDQUFDRCxDQUFoQixFQUFtQixRQUFuQjtBQUF0QyxHQURGLEVBRUUsbUJBRkY7QUFJQUosRUFBQUEsVUFBVSxHQUFHTyxNQUFNLENBQUNLLFNBQVAsQ0FBaUIsQ0FBQyxRQUFELENBQWpCLENBQWI7QUFDQSxTQUFPWixVQUFQO0FBQ0QsQ0FwQkQ7O0FBc0JBLE1BQU1hLGFBQWEsR0FBRyxPQUFPO0FBQUVDLEVBQUFBLEtBQUY7QUFBU0MsRUFBQUE7QUFBVCxDQUFQLEVBQXNCQyxRQUF0QixLQUFtQztBQUN2RCxNQUFJLENBQUNGLEtBQUwsRUFBWTtBQUNWLFVBQU0sSUFBSXBCLEtBQUssQ0FBQ3VCLEtBQVYsQ0FDSnZCLEtBQUssQ0FBQ3VCLEtBQU4sQ0FBWUMsZ0JBRFIsRUFFSixvQ0FGSSxDQUFOO0FBSUQ7O0FBQ0QsUUFBTUMsY0FBYyxHQUFHLE1BQU1sQixpQkFBaUIsRUFBOUM7QUFDQSxRQUFNbUIsU0FBUyxHQUFHdEIsR0FBRyxDQUFDdUIsTUFBSixDQUFXUCxLQUFYLEVBQWtCSyxjQUFsQixFQUFrQztBQUFFRyxJQUFBQSxVQUFVLEVBQUU7QUFBZCxHQUFsQyxDQUFsQjs7QUFFQSxNQUFJRixTQUFTLENBQUNHLEdBQVYsS0FBa0J4QixZQUF0QixFQUFvQztBQUNsQyxVQUFNLElBQUlMLEtBQUssQ0FBQ3VCLEtBQVYsQ0FDSnZCLEtBQUssQ0FBQ3VCLEtBQU4sQ0FBWUMsZ0JBRFIsRUFFSCw4REFBNkRuQixZQUFhLFlBQVdxQixTQUFTLENBQUNHLEdBQUksRUFGaEcsQ0FBTjtBQUlEOztBQUNELE1BQUlILFNBQVMsQ0FBQ0ksR0FBVixLQUFrQlQsRUFBdEIsRUFBMEI7QUFDeEIsVUFBTSxJQUFJckIsS0FBSyxDQUFDdUIsS0FBVixDQUNKdkIsS0FBSyxDQUFDdUIsS0FBTixDQUFZQyxnQkFEUixFQUVILHFDQUZHLENBQU47QUFJRDs7QUFDRCxNQUFJRixRQUFRLEtBQUtTLFNBQWIsSUFBMEJDLEtBQUssQ0FBQ0MsT0FBTixDQUFjWCxRQUFkLENBQTFCLElBQXFEQSxRQUFRLENBQUNZLFFBQVQsQ0FBa0JSLFNBQVMsQ0FBQ1MsR0FBNUIsTUFBcUMsS0FBOUYsRUFBcUc7QUFDbkcsVUFBTSxJQUFJbkMsS0FBSyxDQUFDdUIsS0FBVixDQUNKdkIsS0FBSyxDQUFDdUIsS0FBTixDQUFZQyxnQkFEUixFQUVILHdEQUF1REUsU0FBUyxDQUFDUyxHQUFJLGdCQUFlYixRQUFTLEVBRjFGLENBQU47QUFJRDs7QUFDRCxTQUFPSSxTQUFQO0FBQ0QsQ0E3QkQsQyxDQStCQTs7O0FBQ0EsU0FBU1UsZ0JBQVQsQ0FBMEJDLFFBQTFCLEVBQW9DQyxPQUFPLEdBQUcsRUFBOUMsRUFBa0Q7QUFDaEQsU0FBT25CLGFBQWEsQ0FBQ2tCLFFBQUQsRUFBV0MsT0FBTyxDQUFDQyxTQUFuQixDQUFwQjtBQUNELEMsQ0FFRDs7O0FBQ0EsU0FBU0MsYUFBVCxHQUF5QjtBQUN2QixTQUFPQyxPQUFPLENBQUNDLE9BQVIsRUFBUDtBQUNEOztBQUVEQyxNQUFNLENBQUNDLE9BQVAsR0FBaUI7QUFDZkosRUFBQUEsYUFEZTtBQUVmSixFQUFBQTtBQUZlLENBQWpCIiwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgUGFyc2UgPSByZXF1aXJlKCdwYXJzZS9ub2RlJykuUGFyc2U7XG5jb25zdCBodHRwc1JlcXVlc3QgPSByZXF1aXJlKCcuL2h0dHBzUmVxdWVzdCcpO1xuY29uc3QgTm9kZVJTQSA9IHJlcXVpcmUoJ25vZGUtcnNhJyk7XG5jb25zdCBqd3QgPSByZXF1aXJlKCdqc29ud2VidG9rZW4nKTtcblxuY29uc3QgVE9LRU5fSVNTVUVSID0gJ2h0dHBzOi8vYXBwbGVpZC5hcHBsZS5jb20nO1xuXG5sZXQgY3VycmVudEtleTtcblxuY29uc3QgZ2V0QXBwbGVQdWJsaWNLZXkgPSBhc3luYyAoKSA9PiB7XG4gIGxldCBkYXRhO1xuICB0cnkge1xuICAgIGRhdGEgPSBhd2FpdCBodHRwc1JlcXVlc3QuZ2V0KCdodHRwczovL2FwcGxlaWQuYXBwbGUuY29tL2F1dGgva2V5cycpO1xuICB9IGNhdGNoIChlKSB7XG4gICAgaWYgKGN1cnJlbnRLZXkpIHtcbiAgICAgIHJldHVybiBjdXJyZW50S2V5O1xuICAgIH1cbiAgICB0aHJvdyBlO1xuICB9XG5cbiAgY29uc3Qga2V5ID0gZGF0YS5rZXlzWzBdO1xuXG4gIGNvbnN0IHB1YktleSA9IG5ldyBOb2RlUlNBKCk7XG4gIHB1YktleS5pbXBvcnRLZXkoXG4gICAgeyBuOiBCdWZmZXIuZnJvbShrZXkubiwgJ2Jhc2U2NCcpLCBlOiBCdWZmZXIuZnJvbShrZXkuZSwgJ2Jhc2U2NCcpIH0sXG4gICAgJ2NvbXBvbmVudHMtcHVibGljJ1xuICApO1xuICBjdXJyZW50S2V5ID0gcHViS2V5LmV4cG9ydEtleShbJ3B1YmxpYyddKTtcbiAgcmV0dXJuIGN1cnJlbnRLZXk7XG59O1xuXG5jb25zdCB2ZXJpZnlJZFRva2VuID0gYXN5bmMgKHsgdG9rZW4sIGlkIH0sIGNsaWVudElEKSA9PiB7XG4gIGlmICghdG9rZW4pIHtcbiAgICB0aHJvdyBuZXcgUGFyc2UuRXJyb3IoXG4gICAgICBQYXJzZS5FcnJvci5PQkpFQ1RfTk9UX0ZPVU5ELFxuICAgICAgJ2lkIHRva2VuIGlzIGludmFsaWQgZm9yIHRoaXMgdXNlci4nXG4gICAgKTtcbiAgfVxuICBjb25zdCBhcHBsZVB1YmxpY0tleSA9IGF3YWl0IGdldEFwcGxlUHVibGljS2V5KCk7XG4gIGNvbnN0IGp3dENsYWltcyA9IGp3dC52ZXJpZnkodG9rZW4sIGFwcGxlUHVibGljS2V5LCB7IGFsZ29yaXRobXM6ICdSUzI1NicgfSk7XG5cbiAgaWYgKGp3dENsYWltcy5pc3MgIT09IFRPS0VOX0lTU1VFUikge1xuICAgIHRocm93IG5ldyBQYXJzZS5FcnJvcihcbiAgICAgIFBhcnNlLkVycm9yLk9CSkVDVF9OT1RfRk9VTkQsXG4gICAgICBgaWQgdG9rZW4gbm90IGlzc3VlZCBieSBjb3JyZWN0IE9wZW5JRCBwcm92aWRlciAtIGV4cGVjdGVkOiAke1RPS0VOX0lTU1VFUn0gfCBmcm9tOiAke2p3dENsYWltcy5pc3N9YFxuICAgICk7XG4gIH1cbiAgaWYgKGp3dENsYWltcy5zdWIgIT09IGlkKSB7XG4gICAgdGhyb3cgbmV3IFBhcnNlLkVycm9yKFxuICAgICAgUGFyc2UuRXJyb3IuT0JKRUNUX05PVF9GT1VORCxcbiAgICAgIGBhdXRoIGRhdGEgaXMgaW52YWxpZCBmb3IgdGhpcyB1c2VyLmBcbiAgICApO1xuICB9XG4gIGlmIChjbGllbnRJRCAhPT0gdW5kZWZpbmVkICYmIEFycmF5LmlzQXJyYXkoY2xpZW50SUQpICYmIGNsaWVudElELmluY2x1ZGVzKGp3dENsYWltcy5hdWQpID09PSBmYWxzZSkge1xuICAgIHRocm93IG5ldyBQYXJzZS5FcnJvcihcbiAgICAgIFBhcnNlLkVycm9yLk9CSkVDVF9OT1RfRk9VTkQsXG4gICAgICBgand0IGF1ZCBwYXJhbWV0ZXIgZG9lcyBub3QgaW5jbHVkZSB0aGlzIGNsaWVudCAtIGlzOiAke2p3dENsYWltcy5hdWR9IHwgZXhwZWN0ZWQ6ICR7Y2xpZW50SUR9YFxuICAgICk7XG4gIH1cbiAgcmV0dXJuIGp3dENsYWltcztcbn07XG5cbi8vIFJldHVybnMgYSBwcm9taXNlIHRoYXQgZnVsZmlsbHMgaWYgdGhpcyBpZCB0b2tlbiBpcyB2YWxpZFxuZnVuY3Rpb24gdmFsaWRhdGVBdXRoRGF0YShhdXRoRGF0YSwgb3B0aW9ucyA9IHt9KSB7XG4gIHJldHVybiB2ZXJpZnlJZFRva2VuKGF1dGhEYXRhLCBvcHRpb25zLmNsaWVudF9pZCk7XG59XG5cbi8vIFJldHVybnMgYSBwcm9taXNlIHRoYXQgZnVsZmlsbHMgaWYgdGhpcyBhcHAgaWQgaXMgdmFsaWQuXG5mdW5jdGlvbiB2YWxpZGF0ZUFwcElkKCkge1xuICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICB2YWxpZGF0ZUFwcElkLFxuICB2YWxpZGF0ZUF1dGhEYXRhLFxufTtcbiJdfQ==