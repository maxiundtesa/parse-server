"use strict";

const Parse = require('parse/node').Parse;

const httpsRequest = require('./httpsRequest');

const NodeRSA = require('node-rsa');

const jwt = require('jsonwebtoken');

const TOKEN_ISSUER = 'https://appleid.apple.com';
let currentKey;

const getApplePublicKey = async () => {
  let data;

  try {
    data = await httpsRequest.get('https://appleid.apple.com/auth/keys');
  } catch (e) {
    if (currentKey) {
      return currentKey;
    }

    throw e;
  }

  const key = data.keys[0];
  const pubKey = new NodeRSA();
  pubKey.importKey({
    n: Buffer.from(key.n, 'base64'),
    e: Buffer.from(key.e, 'base64')
  }, 'components-public');
  currentKey = pubKey.exportKey(['public']);
  return currentKey;
};

const verifyIdToken = async ({
  token,
  id
}, clientID) => {
  if (!token) {
    throw new Parse.Error(Parse.Error.OBJECT_NOT_FOUND, 'id token is invalid for this user.');
  }

  const applePublicKey = await getApplePublicKey();
  const jwtClaims = jwt.verify(token, applePublicKey, {
    algorithms: 'RS256'
  });

  if (jwtClaims.iss !== TOKEN_ISSUER) {
    throw new Parse.Error(Parse.Error.OBJECT_NOT_FOUND, `id token not issued by correct OpenID provider - expected: ${TOKEN_ISSUER} | from: ${jwtClaims.iss}`);
  }

  if (jwtClaims.sub !== id) {
    throw new Parse.Error(Parse.Error.OBJECT_NOT_FOUND, `auth data is invalid for this user.`);
  }

  if (clientID !== undefined && Array.isArray(clientID) && clientID.includes(jwtClaims.aud) === false) {
    throw new Parse.Error(Parse.Error.OBJECT_NOT_FOUND, `jwt aud parameter does not include this client - is: ${jwtClaims.aud} | expected: ${clientID}`);
  }

  return jwtClaims;
}; // Returns a promise that fulfills if this id token is valid


function validateAuthData(authData, options = {}) {
  return verifyIdToken(authData, options.client_id);
} // Returns a promise that fulfills if this app id is valid.


function validateAppId() {
  return Promise.resolve();
}

module.exports = {
  validateAppId,
  validateAuthData
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9BZGFwdGVycy9BdXRoL2FwcGxlLmpzIl0sIm5hbWVzIjpbIlBhcnNlIiwicmVxdWlyZSIsImh0dHBzUmVxdWVzdCIsIk5vZGVSU0EiLCJqd3QiLCJUT0tFTl9JU1NVRVIiLCJjdXJyZW50S2V5IiwiZ2V0QXBwbGVQdWJsaWNLZXkiLCJkYXRhIiwiZ2V0IiwiZSIsImtleSIsImtleXMiLCJwdWJLZXkiLCJpbXBvcnRLZXkiLCJuIiwiQnVmZmVyIiwiZnJvbSIsImV4cG9ydEtleSIsInZlcmlmeUlkVG9rZW4iLCJ0b2tlbiIsImlkIiwiY2xpZW50SUQiLCJFcnJvciIsIk9CSkVDVF9OT1RfRk9VTkQiLCJhcHBsZVB1YmxpY0tleSIsImp3dENsYWltcyIsInZlcmlmeSIsImFsZ29yaXRobXMiLCJpc3MiLCJzdWIiLCJ1bmRlZmluZWQiLCJBcnJheSIsImlzQXJyYXkiLCJpbmNsdWRlcyIsImF1ZCIsInZhbGlkYXRlQXV0aERhdGEiLCJhdXRoRGF0YSIsIm9wdGlvbnMiLCJjbGllbnRfaWQiLCJ2YWxpZGF0ZUFwcElkIiwiUHJvbWlzZSIsInJlc29sdmUiLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiOztBQUFBLE1BQU1BLEtBQUssR0FBR0MsT0FBTyxDQUFDLFlBQUQsQ0FBUCxDQUFzQkQsS0FBcEM7O0FBQ0EsTUFBTUUsWUFBWSxHQUFHRCxPQUFPLENBQUMsZ0JBQUQsQ0FBNUI7O0FBQ0EsTUFBTUUsT0FBTyxHQUFHRixPQUFPLENBQUMsVUFBRCxDQUF2Qjs7QUFDQSxNQUFNRyxHQUFHLEdBQUdILE9BQU8sQ0FBQyxjQUFELENBQW5COztBQUVBLE1BQU1JLFlBQVksR0FBRywyQkFBckI7QUFFQSxJQUFJQyxVQUFKOztBQUVBLE1BQU1DLGlCQUFpQixHQUFHLFlBQVk7QUFDcEMsTUFBSUMsSUFBSjs7QUFDQSxNQUFJO0FBQ0ZBLElBQUFBLElBQUksR0FBRyxNQUFNTixZQUFZLENBQUNPLEdBQWIsQ0FBaUIscUNBQWpCLENBQWI7QUFDRCxHQUZELENBRUUsT0FBT0MsQ0FBUCxFQUFVO0FBQ1YsUUFBSUosVUFBSixFQUFnQjtBQUNkLGFBQU9BLFVBQVA7QUFDRDs7QUFDRCxVQUFNSSxDQUFOO0FBQ0Q7O0FBRUQsUUFBTUMsR0FBRyxHQUFHSCxJQUFJLENBQUNJLElBQUwsQ0FBVSxDQUFWLENBQVo7QUFFQSxRQUFNQyxNQUFNLEdBQUcsSUFBSVYsT0FBSixFQUFmO0FBQ0FVLEVBQUFBLE1BQU0sQ0FBQ0MsU0FBUCxDQUNFO0FBQUVDLElBQUFBLENBQUMsRUFBRUMsTUFBTSxDQUFDQyxJQUFQLENBQVlOLEdBQUcsQ0FBQ0ksQ0FBaEIsRUFBbUIsUUFBbkIsQ0FBTDtBQUFtQ0wsSUFBQUEsQ0FBQyxFQUFFTSxNQUFNLENBQUNDLElBQVAsQ0FBWU4sR0FBRyxDQUFDRCxDQUFoQixFQUFtQixRQUFuQjtBQUF0QyxHQURGLEVBRUUsbUJBRkY7QUFJQUosRUFBQUEsVUFBVSxHQUFHTyxNQUFNLENBQUNLLFNBQVAsQ0FBaUIsQ0FBQyxRQUFELENBQWpCLENBQWI7QUFDQSxTQUFPWixVQUFQO0FBQ0QsQ0FwQkQ7O0FBc0JBLE1BQU1hLGFBQWEsR0FBRyxPQUFPO0FBQUVDLEVBQUFBLEtBQUY7QUFBU0MsRUFBQUE7QUFBVCxDQUFQLEVBQXNCQyxRQUF0QixLQUFtQztBQUN2RCxNQUFJLENBQUNGLEtBQUwsRUFBWTtBQUNWLFVBQU0sSUFBSXBCLEtBQUssQ0FBQ3VCLEtBQVYsQ0FDSnZCLEtBQUssQ0FBQ3VCLEtBQU4sQ0FBWUMsZ0JBRFIsRUFFSixvQ0FGSSxDQUFOO0FBSUQ7O0FBQ0QsUUFBTUMsY0FBYyxHQUFHLE1BQU1sQixpQkFBaUIsRUFBOUM7QUFDQSxRQUFNbUIsU0FBUyxHQUFHdEIsR0FBRyxDQUFDdUIsTUFBSixDQUFXUCxLQUFYLEVBQWtCSyxjQUFsQixFQUFrQztBQUFFRyxJQUFBQSxVQUFVLEVBQUU7QUFBZCxHQUFsQyxDQUFsQjs7QUFFQSxNQUFJRixTQUFTLENBQUNHLEdBQVYsS0FBa0J4QixZQUF0QixFQUFvQztBQUNsQyxVQUFNLElBQUlMLEtBQUssQ0FBQ3VCLEtBQVYsQ0FDSnZCLEtBQUssQ0FBQ3VCLEtBQU4sQ0FBWUMsZ0JBRFIsRUFFSCw4REFBNkRuQixZQUFhLFlBQVdxQixTQUFTLENBQUNHLEdBQUksRUFGaEcsQ0FBTjtBQUlEOztBQUNELE1BQUlILFNBQVMsQ0FBQ0ksR0FBVixLQUFrQlQsRUFBdEIsRUFBMEI7QUFDeEIsVUFBTSxJQUFJckIsS0FBSyxDQUFDdUIsS0FBVixDQUNKdkIsS0FBSyxDQUFDdUIsS0FBTixDQUFZQyxnQkFEUixFQUVILHFDQUZHLENBQU47QUFJRDs7QUFDRCxNQUNFRixRQUFRLEtBQUtTLFNBQWIsSUFDQUMsS0FBSyxDQUFDQyxPQUFOLENBQWNYLFFBQWQsQ0FEQSxJQUVBQSxRQUFRLENBQUNZLFFBQVQsQ0FBa0JSLFNBQVMsQ0FBQ1MsR0FBNUIsTUFBcUMsS0FIdkMsRUFJRTtBQUNBLFVBQU0sSUFBSW5DLEtBQUssQ0FBQ3VCLEtBQVYsQ0FDSnZCLEtBQUssQ0FBQ3VCLEtBQU4sQ0FBWUMsZ0JBRFIsRUFFSCx3REFBdURFLFNBQVMsQ0FBQ1MsR0FBSSxnQkFBZWIsUUFBUyxFQUYxRixDQUFOO0FBSUQ7O0FBQ0QsU0FBT0ksU0FBUDtBQUNELENBakNELEMsQ0FtQ0E7OztBQUNBLFNBQVNVLGdCQUFULENBQTBCQyxRQUExQixFQUFvQ0MsT0FBTyxHQUFHLEVBQTlDLEVBQWtEO0FBQ2hELFNBQU9uQixhQUFhLENBQUNrQixRQUFELEVBQVdDLE9BQU8sQ0FBQ0MsU0FBbkIsQ0FBcEI7QUFDRCxDLENBRUQ7OztBQUNBLFNBQVNDLGFBQVQsR0FBeUI7QUFDdkIsU0FBT0MsT0FBTyxDQUFDQyxPQUFSLEVBQVA7QUFDRDs7QUFFREMsTUFBTSxDQUFDQyxPQUFQLEdBQWlCO0FBQ2ZKLEVBQUFBLGFBRGU7QUFFZkosRUFBQUE7QUFGZSxDQUFqQiIsInNvdXJjZXNDb250ZW50IjpbImNvbnN0IFBhcnNlID0gcmVxdWlyZSgncGFyc2Uvbm9kZScpLlBhcnNlO1xuY29uc3QgaHR0cHNSZXF1ZXN0ID0gcmVxdWlyZSgnLi9odHRwc1JlcXVlc3QnKTtcbmNvbnN0IE5vZGVSU0EgPSByZXF1aXJlKCdub2RlLXJzYScpO1xuY29uc3Qgand0ID0gcmVxdWlyZSgnanNvbndlYnRva2VuJyk7XG5cbmNvbnN0IFRPS0VOX0lTU1VFUiA9ICdodHRwczovL2FwcGxlaWQuYXBwbGUuY29tJztcblxubGV0IGN1cnJlbnRLZXk7XG5cbmNvbnN0IGdldEFwcGxlUHVibGljS2V5ID0gYXN5bmMgKCkgPT4ge1xuICBsZXQgZGF0YTtcbiAgdHJ5IHtcbiAgICBkYXRhID0gYXdhaXQgaHR0cHNSZXF1ZXN0LmdldCgnaHR0cHM6Ly9hcHBsZWlkLmFwcGxlLmNvbS9hdXRoL2tleXMnKTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIGlmIChjdXJyZW50S2V5KSB7XG4gICAgICByZXR1cm4gY3VycmVudEtleTtcbiAgICB9XG4gICAgdGhyb3cgZTtcbiAgfVxuXG4gIGNvbnN0IGtleSA9IGRhdGEua2V5c1swXTtcblxuICBjb25zdCBwdWJLZXkgPSBuZXcgTm9kZVJTQSgpO1xuICBwdWJLZXkuaW1wb3J0S2V5KFxuICAgIHsgbjogQnVmZmVyLmZyb20oa2V5Lm4sICdiYXNlNjQnKSwgZTogQnVmZmVyLmZyb20oa2V5LmUsICdiYXNlNjQnKSB9LFxuICAgICdjb21wb25lbnRzLXB1YmxpYydcbiAgKTtcbiAgY3VycmVudEtleSA9IHB1YktleS5leHBvcnRLZXkoWydwdWJsaWMnXSk7XG4gIHJldHVybiBjdXJyZW50S2V5O1xufTtcblxuY29uc3QgdmVyaWZ5SWRUb2tlbiA9IGFzeW5jICh7IHRva2VuLCBpZCB9LCBjbGllbnRJRCkgPT4ge1xuICBpZiAoIXRva2VuKSB7XG4gICAgdGhyb3cgbmV3IFBhcnNlLkVycm9yKFxuICAgICAgUGFyc2UuRXJyb3IuT0JKRUNUX05PVF9GT1VORCxcbiAgICAgICdpZCB0b2tlbiBpcyBpbnZhbGlkIGZvciB0aGlzIHVzZXIuJ1xuICAgICk7XG4gIH1cbiAgY29uc3QgYXBwbGVQdWJsaWNLZXkgPSBhd2FpdCBnZXRBcHBsZVB1YmxpY0tleSgpO1xuICBjb25zdCBqd3RDbGFpbXMgPSBqd3QudmVyaWZ5KHRva2VuLCBhcHBsZVB1YmxpY0tleSwgeyBhbGdvcml0aG1zOiAnUlMyNTYnIH0pO1xuXG4gIGlmIChqd3RDbGFpbXMuaXNzICE9PSBUT0tFTl9JU1NVRVIpIHtcbiAgICB0aHJvdyBuZXcgUGFyc2UuRXJyb3IoXG4gICAgICBQYXJzZS5FcnJvci5PQkpFQ1RfTk9UX0ZPVU5ELFxuICAgICAgYGlkIHRva2VuIG5vdCBpc3N1ZWQgYnkgY29ycmVjdCBPcGVuSUQgcHJvdmlkZXIgLSBleHBlY3RlZDogJHtUT0tFTl9JU1NVRVJ9IHwgZnJvbTogJHtqd3RDbGFpbXMuaXNzfWBcbiAgICApO1xuICB9XG4gIGlmIChqd3RDbGFpbXMuc3ViICE9PSBpZCkge1xuICAgIHRocm93IG5ldyBQYXJzZS5FcnJvcihcbiAgICAgIFBhcnNlLkVycm9yLk9CSkVDVF9OT1RfRk9VTkQsXG4gICAgICBgYXV0aCBkYXRhIGlzIGludmFsaWQgZm9yIHRoaXMgdXNlci5gXG4gICAgKTtcbiAgfVxuICBpZiAoXG4gICAgY2xpZW50SUQgIT09IHVuZGVmaW5lZCAmJlxuICAgIEFycmF5LmlzQXJyYXkoY2xpZW50SUQpICYmXG4gICAgY2xpZW50SUQuaW5jbHVkZXMoand0Q2xhaW1zLmF1ZCkgPT09IGZhbHNlXG4gICkge1xuICAgIHRocm93IG5ldyBQYXJzZS5FcnJvcihcbiAgICAgIFBhcnNlLkVycm9yLk9CSkVDVF9OT1RfRk9VTkQsXG4gICAgICBgand0IGF1ZCBwYXJhbWV0ZXIgZG9lcyBub3QgaW5jbHVkZSB0aGlzIGNsaWVudCAtIGlzOiAke2p3dENsYWltcy5hdWR9IHwgZXhwZWN0ZWQ6ICR7Y2xpZW50SUR9YFxuICAgICk7XG4gIH1cbiAgcmV0dXJuIGp3dENsYWltcztcbn07XG5cbi8vIFJldHVybnMgYSBwcm9taXNlIHRoYXQgZnVsZmlsbHMgaWYgdGhpcyBpZCB0b2tlbiBpcyB2YWxpZFxuZnVuY3Rpb24gdmFsaWRhdGVBdXRoRGF0YShhdXRoRGF0YSwgb3B0aW9ucyA9IHt9KSB7XG4gIHJldHVybiB2ZXJpZnlJZFRva2VuKGF1dGhEYXRhLCBvcHRpb25zLmNsaWVudF9pZCk7XG59XG5cbi8vIFJldHVybnMgYSBwcm9taXNlIHRoYXQgZnVsZmlsbHMgaWYgdGhpcyBhcHAgaWQgaXMgdmFsaWQuXG5mdW5jdGlvbiB2YWxpZGF0ZUFwcElkKCkge1xuICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICB2YWxpZGF0ZUFwcElkLFxuICB2YWxpZGF0ZUF1dGhEYXRhLFxufTtcbiJdfQ==