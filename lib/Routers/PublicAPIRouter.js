"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.PublicAPIRouter = void 0;

var _PromiseRouter = _interopRequireDefault(require("../PromiseRouter"));

var _Config = _interopRequireDefault(require("../Config"));

var _express = _interopRequireDefault(require("express"));

var _path = _interopRequireDefault(require("path"));

var _fs = _interopRequireDefault(require("fs"));

var _querystring = _interopRequireDefault(require("querystring"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const public_html = _path.default.resolve(__dirname, '../../public_html');

const views = _path.default.resolve(__dirname, '../../views');

class PublicAPIRouter extends _PromiseRouter.default {
  verifyEmail(req) {
    const {
      token,
      username,
      mail
    } = req.query;
    const appId = process.env.APP_ID || 'TicketFuchs';
    console.log(`AppID: ${appId}`);

    const config = _Config.default.get(appId);

    if (!config) {
      console.log("PublicApiRouter.js L. 18");
      this.invalidRequest();
    }

    if (!config.publicServerURL) {
      return this.missingPublicServerURL();
    }

    if (!token || !username || !mail) {
      console.log(`Mailadresse: ${mail}`);
      console.log("PublicApiRouter.js L. 28");
      return this.invalidLink(req);
    }

    const userController = config.userController;
    return userController.verifyEmail(username, token).then(() => {
      const params = _querystring.default.stringify({
        mail
      });

      return Promise.resolve({
        status: 302,
        location: `${config.verifyEmailSuccessURL}?${params}`
      });
    }, () => {
      return this.invalidVerificationLink(req);
    });
  }

  resendVerificationEmail(req) {
    console.log("Request" + JSON.stringify(req.body));
    const username = req.body.username;
    const appId = process.env.APP_ID || 'TicketFuchs';
    console.log(`AppID: ${appId}`);

    const config = _Config.default.get(appId);

    if (!config) {
      console.log("PublicApiRouter.js L. 51");
      this.invalidRequest();
    }

    if (!config.publicServerURL) {
      return this.missingPublicServerURL();
    }

    if (!username) {
      console.log("Username:" + username);
      console.log("PublicApiRouter.js L. 68");
      return this.invalidLink(req);
    }

    const userController = config.userController;
    return userController.resendVerificationEmail(username).then(() => {
      const params = _querystring.default.stringify({
        username
      });

      return Promise.resolve({
        status: 302,
        location: `${config.linkSendSuccessURL}?${params}`
      });
    }, () => {
      return Promise.resolve({
        status: 302,
        location: `${config.linkSendFailURL}`
      });
    });
  }

  changePassword(req) {
    return new Promise((resolve, reject) => {
      const appId = process.env.APP_ID || 'TicketFuchs';

      const config = _Config.default.get(appId);

      if (!config) {
        console.log("PublicApiRouter.js L. 95");
        this.invalidRequest();
      }

      if (!config.publicServerURL) {
        return resolve({
          status: 404,
          text: 'Not found.'
        });
      } // Should we keep the file in memory or leave like that?


      _fs.default.readFile(_path.default.resolve(views, 'choose_password'), 'utf-8', (err, data) => {
        if (err) {
          return reject(err);
        }

        data = data.replace('PARSE_SERVER_URL', `'${config.publicServerURL}'`);
        resolve({
          text: data
        });
      });
    });
  }

  requestResetPassword(req) {
    const appId = process.env.APP_ID || 'TicketFuchs';
    console.log(`AppID: ${appId}`);

    const config = _Config.default.get(appId);

    if (!config) {
      console.log("PublicApiRouter.js L. 120");
      this.invalidRequest();
    }

    if (!config.publicServerURL) {
      return this.missingPublicServerURL();
    }

    const {
      username,
      token,
      mail
    } = req.query;

    if (!username || !token || !mail) {
      console.log(`Mailadresse: ${mail}`);
      console.log("PublicApiRouter.js L. 28");
      return this.invalidLink(req);
    }

    return config.userController.checkResetTokenValidity(username, token).then(() => {
      const params = _querystring.default.stringify({
        token,
        mail: mail,
        username
      });

      return Promise.resolve({
        status: 302,
        location: `${config.choosePasswordURL}?${params}`
      });
    }, () => {
      return this.invalidLink(req);
    });
  }

  resetPassword(req) {
    const appId = process.env.APP_ID || 'TicketFuchs';
    console.log(`AppID: ${appId}`);

    const config = _Config.default.get(appId);

    if (!config) {
      console.log("PublicApiRouter.js L. 157");
      this.invalidRequest();
    }

    if (!config.publicServerURL) {
      return this.missingPublicServerURL();
    }

    const {
      username,
      token,
      new_password,
      mail
    } = req.body;

    if (!username || !token || !new_password || !mail) {
      console.log("PublicApiRouter.js L. 185");
      return this.invalidLink(req);
    }

    return config.userController.updatePassword(username, token, new_password).then(() => {
      const params = _querystring.default.stringify({
        mail: mail
      });

      return Promise.resolve({
        status: 302,
        location: `${config.passwordResetSuccessURL}?${params}`
      });
    }, err => {
      const params = _querystring.default.stringify({
        username: username,
        token: token,
        id: config.applicationId,
        error: err,
        mail: mail
      });

      return Promise.resolve({
        status: 302,
        location: `${config.choosePasswordURL}?${params}`
      });
    });
  }

  invalidLink(req) {
    var config = null;
    console.log("PublicApiRouter.js L. 215");
    console.log(`req: ${req}`);

    if (req === undefined) {
      const appId = process.env.APP_ID || 'TicketFuchs';
      console.log(`AppID: ${appId}`);
      config = _Config.default.get(appId);
      console.log(`config: ${config}`);
    } else {
      config = req.config;
      console.log(`config: ${config}`);
    }

    return Promise.resolve({
      status: 302,
      location: config.invalidLinkURL
    });
  }

  invalidVerificationLink(req) {
    var config = req.config;
    console.log("PublicApiRouter.js L. 235");
    console.log(`req: ${req}`);

    if (config === undefined) {
      const appId = process.env.APP_ID || 'TicketFuchs';
      console.log(`AppID: ${appId}`);
      config = _Config.default.get(appId);
      console.log(`config: ${config}`);
    }

    console.log(`config: ${config}`);

    if (req.query.username) {
      const params = _querystring.default.stringify({
        username: req.query.username
      });

      return Promise.resolve({
        status: 302,
        location: `${config.invalidVerificationLinkURL}?${params}`
      });
    } else {
      console.log("PublicApiRouter.js L. 253");
      return this.invalidLink(req);
    }
  }

  missingPublicServerURL() {
    return Promise.resolve({
      text: 'Not found.',
      status: 404
    });
  }

  invalidRequest() {
    const error = new Error();
    error.status = 403;
    error.message = 'unauthorized';
    throw error;
  }

  setConfig(req) {
    var seen = [];
    console.log(JSON.stringify(req, function (key, val) {
      if (val != null && typeof val == "object") {
        if (seen.indexOf(val) >= 0) {
          return;
        }

        seen.push(val);
      }

      return val;
    }));
    const appId = process.env.APP_ID || 'TicketFuchs';
    req.config = _Config.default.get(appId);
    return Promise.resolve();
  }

  mountRoutes() {
    this.route('GET', '/verify_email', req => {
      this.setConfig(req);
    }, req => {
      return this.verifyEmail(req);
    });
    this.route('POST', '/resend_verification_email', req => {
      this.setConfig(req);
    }, req => {
      return this.resendVerificationEmail(req);
    });
    this.route('GET', '/choose_password', req => {
      return this.changePassword(req);
    });
    this.route('POST', '/request_password_reset', req => {
      this.setConfig(req);
    }, req => {
      return this.resetPassword(req);
    });
    this.route('GET', '/request_password_reset', req => {
      this.setConfig(req);
    }, req => {
      return this.requestResetPassword(req);
    });
  }

  expressRouter() {
    const router = _express.default.Router();

    router.use('/apps', _express.default.static(public_html));
    router.use('/', super.expressRouter());
    return router;
  }

}

exports.PublicAPIRouter = PublicAPIRouter;
var _default = PublicAPIRouter;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,